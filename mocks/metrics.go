// Code generated by MockGen. DO NOT EDIT.
// Source: ./connectors/redis/redis.go
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	"github.com/uber-go/dosa/connectors/redis"
	tally "github.com/uber-go/tally"
)

// MockScope is a mock of Scope interface
type MockScope struct {
	ctrl     *gomock.Controller
	recorder *MockScopeMockRecorder
}

// MockScopeMockRecorder is the mock recorder for MockScope
type MockScopeMockRecorder struct {
	mock *MockScope
}

// NewMockScope creates a new mock instance
func NewMockScope(ctrl *gomock.Controller) *MockScope {
	mock := &MockScope{ctrl: ctrl}
	mock.recorder = &MockScopeMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockScope) EXPECT() *MockScopeMockRecorder {
	return m.recorder
}

// Counter mocks base method
func (m *MockScope) Counter(name string) tally.Counter {
	ret := m.ctrl.Call(m, "Counter", name)
	ret0, _ := ret[0].(tally.Counter)
	return ret0
}

// Counter indicates an expected call of Counter
func (mr *MockScopeMockRecorder) Counter(name interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Counter", reflect.TypeOf((*MockScope)(nil).Counter), name)
}

// Tagged mocks base method
func (m *MockScope) Tagged(tags map[string]string) redis.Scope {
	ret := m.ctrl.Call(m, "Tagged", tags)
	ret0, _ := ret[0].(redis.Scope)
	return ret0
}

// Tagged indicates an expected call of Tagged
func (mr *MockScopeMockRecorder) Tagged(tags interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Tagged", reflect.TypeOf((*MockScope)(nil).Tagged), tags)
}

// SubScope mocks base method
func (m *MockScope) SubScope(name string) redis.Scope {
	ret := m.ctrl.Call(m, "SubScope", name)
	ret0, _ := ret[0].(redis.Scope)
	return ret0
}

// SubScope indicates an expected call of SubScope
func (mr *MockScopeMockRecorder) SubScope(name interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubScope", reflect.TypeOf((*MockScope)(nil).SubScope), name)
}

// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/uber-go/tally (interfaces: Counter)
// MockCounter is a mock of Counter interface
type MockCounter struct {
	ctrl     *gomock.Controller
	recorder *MockCounterMockRecorder
}

// MockCounterMockRecorder is the mock recorder for MockCounter
type MockCounterMockRecorder struct {
	mock *MockCounter
}

// NewMockCounter creates a new mock instance
func NewMockCounter(ctrl *gomock.Controller) *MockCounter {
	mock := &MockCounter{ctrl: ctrl}
	mock.recorder = &MockCounterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockCounter) EXPECT() *MockCounterMockRecorder {
	return m.recorder
}

// Inc mocks base method
func (m *MockCounter) Inc(arg0 int64) {
	m.ctrl.Call(m, "Inc", arg0)
}

// Inc indicates an expected call of Inc
func (mr *MockCounterMockRecorder) Inc(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Inc", reflect.TypeOf((*MockCounter)(nil).Inc), arg0)
}
